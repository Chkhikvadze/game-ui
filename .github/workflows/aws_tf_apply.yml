### Reusable workflow to download terraform artifact built by `az_tf_plan` and apply the artifact/plan ###
name: 'Apply_TF_Plan'
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      gh_environment:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: null
      tf_vars_file:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string
    secrets:
      cli_config_credentials_token:
        description: 'cli config credentials token'
        required: true
      github_personal_access_token:
        description: 'GitHub Personal Access Token'
        required: true

jobs:
  apply-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Change file name
        run: |
          mv ${{ github.workspace }}/${{ inputs.path }}/varfiles/${{ inputs.gh_environment }}.tfvars  ${{ github.workspace }}/${{ inputs.path }}/${{ inputs.gh_environment }}.auto.tfvars

      - name: Update task_container_version
        run: |
          TFVARS="${{ github.workspace }}/${{ inputs.path }}/${{ inputs.gh_environment }}.auto.tfvars"
          echo -e "github_personal_access_token = \"${{ secrets.github_personal_access_token }}\"\n" >> $TFVARS
          echo -e "environment = \"${{ inputs.gh_environment }}\"\n" >> $TFVARS

      - name: Display .auto.tfvars file content
        run: |
          cat ${{ github.workspace }}/${{ inputs.path }}/${{ inputs.gh_environment }}.auto.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: ${{ inputs.tf_version }}
          cli_config_credentials_token: ${{ secrets.cli_config_credentials_token }}

      - name: Terraform Init
        env:
          GITHUB_TOKEN: ${{ secrets.github_personal_access_token }}
          TF_WORKSPACE: ${{ inputs.gh_environment }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_github_personal_access_token: ${{ secrets.github_personal_access_token }}
          TF_VAR_environment: ${{ inputs.gh_environment }}
          TF_WORKSPACE: ${{ inputs.gh_environment }}
          TF_environment: ${{ inputs.gh_environment }}
        run: terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
